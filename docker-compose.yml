services:
  backend:
    build:
      context: ./backend
    container_name: is_backend_c
    volumes:
      - .:/workspace:cached
    # Načtení proměnných z .env souboru
    env_file:
      - .env
    environment:
      - FLASK_ENV=development # Nebo production
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATABASE_HOST=db # Název služby databáze
      - DATABASE_PORT=5432
    # depends_on:
    #   db:
    #     # Počká, až bude databáze připravena přijímat spojení
    #     condition: service_healthy
    command: /bin/sh -c "while sleep 1000; do :; done"
    networks:
      - backend
      - frontend

  frontend:
    build:
      context: ./frontend
    container_name: is_frontend_c
    ports:
      - "5173:5173"
    volumes:
      - .:/workspace:cached
    environment:
      - NODE_ENV=development
      # Zajistí, že Vite bude naslouchat na všech rozhraních a povolí HMR přes Docker
      - VITE_SERVER_HOST=0.0.0.0
    command: /bin/sh -c "while sleep 1000; do :; done"
    depends_on:
      - backend
    networks:
      - frontend

  db:
    image: postgres:latest
    container_name: is_db_c
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - backend
    # Kontrola stavu databáze
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s # Dává DB čas na start před první kontrolou
    restart: unless-stopped
    # pgadmin:
    #   image: dpage/pgadmin4:latest
    #   restart: unless-stopped
    #   volumes:
    #     - pgadmin-data:/var/lib/pgadmin
    #   environment:
    #     PGADMIN_DEFAULT_EMAIL: admin@email.com
    #     PGADMIN_DEFAULT_PASSWORD: secret
    #     PGADMIN_LISTEN_ADDRESS: 0.0.0.0
    #     PGADMIN_LISTEN_PORT: 5500
    #   ports:
    #     - 5500:5500
    #   networks:
    #     - backend

volumes:
  postgres-data:
    # pgadmin-data:

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
